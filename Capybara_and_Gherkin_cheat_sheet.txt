--Capybara--

	=Navigating=
    visit('/projects')
    visit(post_comments_path(post))

=Clicking links and buttons=
    click_link('id-of-link')
    click_link('Link Text')
    click_button('Save')
    click('Link Text') # Click either a link or a button
    click('Button Value')

=Interacting with forms=
    fill_in('First Name', :with => 'John')
    fill_in('Password', :with => 'Seekrit')
    fill_in('Description', :with => 'Really Long Text…')
    choose('A Radio Button')
    check('A Checkbox')
    uncheck('A Checkbox')
    attach_file('Image', '/path/to/image.jpg')
    select('Option', :from => 'Select Box')

=scoping=
    within("//li[@id='employee']") do
      fill_in 'Name', :with => 'Jimmy'
    end
    within(:css, "li#employee") do
      fill_in 'Name', :with => 'Jimmy'
    end
    within_fieldset('Employee') do
      fill_in 'Name', :with => 'Jimmy'
    end
    within_table('Employee') do
      fill_in 'Name', :with => 'Jimmy'
    end

=Querying=
    page.has_xpath?('//table/tr')
    page.has_css?('table tr.foo')
    page.has_content?('foo')
    page.should have_xpath('//table/tr')
    page.should have_css('table tr.foo')
    page.should have_content('foo')
    page.should have_no_content('foo')
    find_field('First Name').value
    find_link('Hello').visible?
    find_button('Send').click
    find('//table/tr').click
    locate("//*[@id='overlay'").find("//h1").click
    all('a').each { |a| a[:href] }

=Scripting=
    result = page.evaluate_script('4 + 4');

=Debugging=
    save_and_open_page

=Asynchronous JavaScript=
    click_link('foo')
    click_link('bar')
    page.should have_content('baz')
    page.should_not have_xpath('//a')
    page.should have_no_xpath('//a')

=XPath and CSS=
    within(:css, 'ul li') { ... }
    find(:css, 'ul li').text
    locate(:css, 'input#name').value
    Capybara.default_selector = :css
    within('ul li') { ... }
    find('ul li').text
locate('input#name').value





----------------Gherkin---------------------

Feature: User Resets Password
  In order to get back in the system when I have forgotten my password
  As a User on the sign in page
  I want to reset my password

  - click forgot password
  - I am taken to the reset password page
  - provide email
  - click reset password
  - I receive an email with a reset password link
  - click the reset password link
  - I am taken to the new password page
  - provide
  -- password
  -- password confirmation
  - click save
  - I am taken to my dashboard
  - my password is changed

  Scenario:
    Given the following client:
      | email    | wallace@example.com |
    And I am on the homepage
    When I follow "Sign in"
    And I follow "Forgot password"
    And I fill in "Email" with "wallace@example.com"
    And I press "Retrieve Password"
    Then "wallace@example.com" should receive 1 email
    When I open the email
    And I follow the first link in the email
    And I fill in "Password" with "whatever"
    And I fill in "Password confirmation" with "whatever"
    And I press "Change My Password"
Then I should see "Your password was changed successfully. You are now signed in."




------------------BDDfire------------------------------------------


After Ruby install run:

$ gem install bddfire

$ bddfire fire_cucumber

$ bddfire fire_load

$ bddfire fire_accessibility

$ cd cucumber

$ bundle install


Parallel Cucumber & Re-run Failed

You can run entire test suite in 10 different processes but you can increase number of processes. The reports are generated for each process. If any scenario failed it will re-run. It will use poltergeist by default but you can change in Rakefile

$ bundle exec rake parallel_cucumber



Selenium Firefox

You can use selenium driver to run scenario in browser [firefox].

$ bundle exec rake selenium



You can use PhantomJS based Capybara driver Poltergeist driver.

$ bundle exec rake poltergeist



REST API Testing

You can run your scenarios in Google Chrome

$ bundle exec rake api


Cloud Testing Frameworks

Please enter your USERNAME and KEY in the env.rb file

$ bundle exec rake sauce/browserstack/testingbot


Appium:

Run Appium server in the background.

$rake start_appium

Now run cucumber with appium. Make sure you updated env.rb file with capabilities you want to use for Android.

$ bundle exec cucumber -p appium ADB_SERIAL=serial_number

Now run cucumber with appium iOS. Make sure you updated env.rb file with capabilities you want to use for iOS

$ bundle exec cucumber -p appium

Cuke_sniffer

You can use cuke_sniffer to detect smells in your Cucumber. It will generate reports in the cuke_sniffer.html in the 'reports' directory.

$ rake cuke_sniffer


Rubocop

You can use rubocop to detect ruby errors in your Ruby file

$ rake rubocop

This will report all the offence in rubocop.


Docker

We can run our cucumber scenario inside Docker containers. Assuming you have Docker installed. Check your Docker installation before using.

$ bundle exec rake docker

This will build Docker image 'bddfire-ci' and run cucumber scenarios inside container 'bddfire-ci'. image

Gatling

You can use Gatling setup to execute load tests against your endpoints. Simply change 'load/user-files/simulation/SampleLoadTEST.scala' file and puts your URL to Test as base URL.

$ cd load
$ sh gatling_local.sh

This will run load tests against your url. You are free to record new simulations. Once finished there will be link to HTML report at the end. image

There is CI integration to plug it with jenkins


Accessibility Testing : Axe

We can run accessibility checks on our web page using BDDfire. You have to pass URL as environment variable e.g

$ cd accessibility
$ bundle exec cucumber -r features URL="http://www.google.co.uk"


http://www.rubydoc.info/gems/bddfire/2.0.8





